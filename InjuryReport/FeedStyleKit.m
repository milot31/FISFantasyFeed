//
//  FeedStyleKit.m
//  fantasyFeed
//
//  Created by Phil on 1/14/16.
//  Copyright (c) 2016 Phil. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//

#import "FeedStyleKit.h"


@implementation FeedStyleKit

#pragma mark Cache

static UIColor* _gradientColor2 = nil;
static UIColor* _gradientColor3 = nil;

static PCGradient* _gradient = nil;

#pragma mark Initialization

+ (void)initialize
{
    // Colors Initialization
    _gradientColor2 = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 1];
    _gradientColor3 = [UIColor colorWithRed: 0.927 green: 0.917 blue: 0.917 alpha: .9];

    // Gradients Initialization
    CGFloat gradientLocations[] = {0, 0.49, 1};
    _gradient = [PCGradient gradientWithColors: @[FeedStyleKit.gradientColor3, [FeedStyleKit.gradientColor3 blendedColorWithFraction: 0.5 ofColor: FeedStyleKit.gradientColor2], FeedStyleKit.gradientColor2] locations: gradientLocations];

}

#pragma mark Colors

+ (UIColor*)gradientColor2 { return _gradientColor2; }
+ (UIColor*)gradientColor3 { return _gradientColor3; }

#pragma mark Gradients

+ (PCGradient*)gradient { return _gradient; }

#pragma mark Drawing Methods

+ (void)drawCanvas1
{
}

@end



@interface PCGradient ()
{
    CGGradientRef _CGGradient;
}
@end

@implementation PCGradient

- (instancetype)initWithColors: (NSArray*)colors locations: (const CGFloat*)locations
{
    self = [self init];
    if (self)
    {
        CGColorSpaceRef colorSpace = CGColorSpaceCreateDeviceRGB();
        NSMutableArray* cgColors = [NSMutableArray array];
        for (UIColor* color in colors)
            [cgColors addObject: (id)color.CGColor];

        _CGGradient = CGGradientCreateWithColors(colorSpace, (__bridge CFArrayRef)cgColors, locations);
        CGColorSpaceRelease(colorSpace);
    }
    return self;
}

+ (instancetype)gradientWithColors: (NSArray*)colors locations: (const CGFloat*)locations
{
    return [[self alloc] initWithColors: colors locations: locations];
}

+ (instancetype)gradientWithStartingColor: (UIColor*)startingColor endingColor: (UIColor*)endingColor
{
    CGFloat locations[] = {0, 1};
    return [[self alloc] initWithColors: @[startingColor, endingColor] locations: locations];
}

- (void)dealloc
{
    CGGradientRelease(_CGGradient);
}

@end



@implementation UIColor (PaintCodeAdditions)

- (UIColor*)blendedColorWithFraction: (CGFloat)fraction ofColor: (UIColor*)color2
{
    UIColor* color1 = self;

    CGFloat r1 = 0, g1 = 0, b1 = 0, a1 = 0;
    CGFloat r2 = 0, g2 = 0, b2 = 0, a2 = 0;


    [color1 getRed: &r1 green: &g1 blue: &b1 alpha: &a1];
    [color2 getRed: &r2 green: &g2 blue: &b2 alpha: &a2];

    CGFloat r = r1 * (1 - fraction) + r2 * fraction;
    CGFloat g = g1 * (1 - fraction) + g2 * fraction;
    CGFloat b = b1 * (1 - fraction) + b2 * fraction;
    CGFloat a = a1 * (1 - fraction) + a2 * fraction;

    return [UIColor colorWithRed: r green: g blue: b alpha: a];
}

@end
